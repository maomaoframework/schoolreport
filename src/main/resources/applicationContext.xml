<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:cache="http://www.springframework.org/schema/cache"
	xmlns:task="http://www.springframework.org/schema/task" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd"
	default-lazy-init="true">

	<!-- support 多种环境（dev、qa、product等）定义vm参数指定WEB_CONFIG_HOME的具体值 eg:-production.mode=product -->
	<bean id="placeholderConfig" class="huxg.framework.config.SysConfiguration">
		<property name="configurations">
			<list>
				<!-- 自己项目的单独属性文件定义 top.properties 会覆盖 common.properties同名属性值 -->
				<value>classpath:config/${production.mode}/config.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>

	<context:component-scan base-package="huxg.framework">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- 注解风格支持 -->
	<aop:aspectj-autoproxy proxy-target-class="true"
		expose-proxy="true" />
	
	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="java.lang.System" />
		<property name="targetMethod" value="setProperty" />
		<property name="arguments">
			<list>
				<value>system.project_name</value>
				<value>${system.project_name}</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置的动态数据源，实现读写分离 -->
	<bean id="dataSource" class="huxg.framework.datasource.ReadWriteDataSource">
		<property name="writeDataSource" ref="masterDataSource" />
		<property name="readDataSourceMap">
			<map>
				<entry key="readDataSource1" value-ref="slaveDataSource" />
			</map>
		</property>
	</bean>

	<!-- Master数据源,负责write -->
	<bean id="masterDataSource" parent="parentDataSource">
		<property name="url" value="${datasource.masterUrl}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="wall-filter" />
			</list>
		</property>
	</bean>

	<!-- Slave数据源,负责read -->
	<bean id="slaveDataSource" parent="parentDataSource">
		<property name="url" value="${datasource.slaveUrl}" />
		<property name="username" value="${datasource.username}" />
		<property name="password" value="${datasource.password}" />
		<property name="proxyFilters">
			<list>
				<ref bean="stat-filter" />
				<ref bean="wall-filter-readonly" />
			</list>
		</property>
	</bean>

	<!-- Druid数据源配置 -->
	<bean id="parentDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="filters" value="${druid.filters}"></property>
		<!-- 数据源需要数据库密码进行解密 -->
		<property name="connectionProperties" value="${druid.connectProperties}"></property>
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${druid.initialSize}" />
		<property name="minIdle" value="${druid.minIdle}" />
		<property name="maxActive" value="${druid.maxActive}" />
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${druid.maxWait}" />
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 testWhileIdle的判断依据 -->
		<property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 设置5分钟 -->
		<property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
		<!-- 用来检测连接是否有效的sql，要求是一个查询语句。如果validationQuery 为 null，testOnBorrow、testOnReturn、testWhileIdle都不会其作用。 -->
		<property name="validationQuery" value="${druid.validationQuery}" />
		<!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 -->
		<property name="testWhileIdle" value="${druid.testWhileIdle}" />
		<!-- 申请连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能。 -->
		<property name="testOnBorrow" value="${druid.testOnBorrow}" />
		<!-- 归还连接时执行validationQuery检测连接是否有效，做了这个配置会降低性能 -->
		<property name="testOnReturn" value="${druid.testOnReturn}" />
		<!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql5.5以下的版本中没有PSCache功能，建议关闭掉。5.5及以上版本有PSCache，建议开启。 -->
		<property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />
		<!-- 要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100 -->
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="${druid.maxPoolPreparedStatementPerConnectionSize}" />
		<!-- 连接泄漏监测(忘记close) 配置removeAbandoned对性能会有一些影响，建议怀疑存在泄漏之后再打开 -->
		<!-- 打开removeAbandoned功能 -->
		<property name="removeAbandoned" value="${druid.removeAbandoned}" />
		<!-- 1800秒，也就是30分钟 -->
		<property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
		<!-- 关闭abanded连接时输出错误日志 -->
		<property name="logAbandoned" value="${druid.logAbandoned}" />
	</bean>

	<!-- 监控拦截器 -->
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
		<!-- slowSqlMillis用来配置SQL慢的标准，执行时间超过slowSqlMillis的就是慢,并且通过日志输出执行慢的SQL，配置是5秒 -->
		<property name="slowSqlMillis" value="${druid.slowSqlMillis}" />
		<property name="logSlowSql" value="${druid.logSlowSql}" />
		<!-- 日志Sql合并配置 -->
		<property name="mergeSql" value="${druid.mergeSql}" />
	</bean>

	<!-- 配置防御SQL注入攻击：标识为只读数据源 -->
	<bean id="wall-filter-readonly" class="com.alibaba.druid.wall.WallFilter">
		<!-- 数据库类型 -->
		<property name="dbType" value="${druid.dbType}" />
		<property name="config" ref="wall-filter-config-readonly" />
	</bean>

	<!-- 配置防御SQL注入攻击 -->
	<bean id="wall-filter" class="com.alibaba.druid.wall.WallFilter">
		<!-- 数据库类型 -->
		<property name="dbType" value="${druid.dbType}" />
		<property name="config" ref="wall-filter-config" />
	</bean>

	<!-- 配置防御SQL注入攻击：标识为只读数据源 -->
	<bean id="wall-filter-config-readonly" class="com.alibaba.druid.wall.WallConfig"
		init-method="init">
		<!-- 指定配置装载的目录 -->
		<property name="dir" value="META-INF/wall/mysql" />
		<!-- readonly start -->
		<property name="selectIntoAllow" value="false" />
		<property name="deleteAllow" value="false" />
		<property name="updateAllow" value="false" />
		<property name="insertAllow" value="false" />
		<property name="mergeAllow" value="false" />
		<!-- readonly end -->
		<!--检查SELECT语句的WHERE子句是否是一个永真条件 -->
		<property name="selectWhereAlwayTrueCheck" value="false" />
		<!--检查查询条件(WHERE/HAVING子句)中是否包含LIKE永真条件 -->
		<property name="conditionLikeTrueAllow" value="true" />
	</bean>

	<!-- 配置防御SQL注入攻击 -->
	<bean id="wall-filter-config" class="com.alibaba.druid.wall.WallConfig"
		init-method="init">
		<!-- 指定配置装载的目录 -->
		<property name="dir" value="META-INF/wall/mysql" />
		<!--检查SELECT语句的WHERE子句是否是一个永真条件 -->
		<property name="selectWhereAlwayTrueCheck" value="false" />
		<!--检查查询条件(WHERE/HAVING子句)中是否包含LIKE永真条件 -->
		<property name="conditionLikeTrueAllow" value="true" />
	</bean>

	<bean id="druidStatInterceptor"
		class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor" />
	<!-- xml风格支持 -->

	<aop:config proxy-target-class="true" expose-proxy="true">
		<aop:advisor id="druidAdvisor" advice-ref="druidStatInterceptor"
			pointcut="execution(* huxg.framework..business..*Impl.*(..))" />
	</aop:config>

	<bean id="dataSourceProxy"
		class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy"
		lazy-init="false">
		<property name="targetDataSource" ref="dataSource" />
	</bean>

	<bean id="jdbcDao" class="huxg.framework.dao.jdbc.JdbcDAO">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<bean id="entityManagerFactory"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="persistenceXmlLocation" value="classpath*:/persistence.xml" 
			/> <property name="persistenceUnitName" value="persistenceUnit" /> -->
		<property name="packagesToScan" value="huxg.framework.entity" />
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="${jpa.showsql}" />
				<property name="generateDdl" value="false" />
			</bean>
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.ejb.interceptor">huxg.framework.interceptor.Test</prop>
				<prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
				<prop key="hibernate.cache.use_second_level_cache">${hibernate.cache.use_second_level_cache}</prop>
				<prop key="hibernate.cache.region.factory_class">${hibernate.cache.region.factory_class}</prop>
				<prop key="hibernate.cache.use_query_cache">${hibernate.cache.use_query_cache}</prop>
				<prop key="hibernate.jdbc.fetch_size">${hibernate.jdbc.fetch_size}</prop>
				<prop key="hibernate.jdbc.batch_size">${hibernate.jdbc.batch_size}</prop>
				<prop key="hibernate.connection.isolation">2</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<prop key="hibernate.search.default.directory_provider">org.hibernate.search.store.FSDirectoryProvider</prop>
				<prop key="hibernate.search.default.indexBase">${java.io.tmpdir}/${system.project_name}/index</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />

	<bean
		class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
		<property name="targetClass" value="java.lang.System" />
		<property name="targetMethod" value="setProperty" />
		<property name="arguments">
			<list>
				<value>system.project_name</value>
				<value>${system.project_name}</value>
			</list>
		</property>
	</bean>
	
	<bean id="ehCacheManager"
		class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:/ehcache.xml" />
		<property name="shared" value="true" />
	</bean>

	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehCacheManager" />
	</bean>

	<bean id="freeMarkerConfigurer"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPaths" value="${template.loader_path}" />
		<property name="freemarkerSettings">
			<props>
				<prop key="defaultEncoding">${template.encoding}</prop>
				<prop key="url_escaping_charset">${url_escaping_charset}</prop>
				<prop key="locale">${locale}</prop>
				<prop key="template_update_delay">${template.update_delay}</prop>
				<prop key="tag_syntax">auto_detect</prop>
				<prop key="whitespace_stripping">true</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="number_format">${template.number_format}</prop>
				<prop key="boolean_format">${template.boolean_format}</prop>
				<prop key="datetime_format">${template.datetime_format}</prop>
				<prop key="date_format">${template.date_format}</prop>
				<prop key="time_format">${template.time_format}</prop>
				<prop key="object_wrapper">freemarker.ext.beans.BeansWrapper</prop>
				<prop key="auto_import">/plugin.ftl as jqPlugin</prop>
			</props>
		</property>
		<property name="freemarkerVariables">
			<map>
				<entry key="systemName" value="${system.name}" />
				<entry key="systemVersion" value="${system.version}" />
				<entry key="systemDescription" value="${system.description}" />
				<entry key="systemShowPowered" value="#{${system.show_powered}}" />
				<entry key="systemKeywords" value="${system.keywords}" />
				<entry key="systemTechSupport" value="${system.techsupport}" />
				<entry key="systemCopyright" value="${system.copyright}" />
				<entry key="systemAuthor" value="${system.author}" />
				<entry key="static_server" value="${system.static_server}" />
				<entry key="base" value="#{servletContext.contextPath}" />
				<entry key="js_and_css_compress_extention" value="${js_and_css_compress_extention}" />
				<entry key="locale" value="${locale}" />
				<entry key="setting"
					value="#{T(huxg.framework.config.SysConfiguration).getProperties()}" />
				<entry key="abbreviate" value-ref="abbreviateMethod" />
				<entry key="currency" value-ref="currencyMethod" />
				<entry key="execute_time" value-ref="executeTimeDirective" />
				<entry key="flash_message" value-ref="flashMessageDirective" />
				<!-- <entry key="current_member" value-ref="currentMemberDirective" /> -->
				<entry key="pagination" value-ref="paginationDirective" />

				<entry key="entity_list" value-ref="entityListDirective" />
				<entry key="imageTag" value-ref="imageDirective" />
				<entry key="site_url" value="${site.url}" />
				<entry key="nf" value-ref="NumberFormatDirective" />
			</map>
		</property>
	</bean>

	<bean id="localeResolver"
		class="org.springframework.web.servlet.i18n.FixedLocaleResolver">
		<property name="defaultLocale" value="${locale}" />
	</bean>

	<bean id="imageCaptchaService"
		class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
		<property name="captchaEngine">
			<bean class="huxg.framework.captcha.CaptchaEngine" />
		</property>
		<property name="minGuarantedStorageDelayInSeconds" value="3600" />
	</bean>

	<bean id="taskExecutor"
		class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="${task.core_pool_size}" />
		<property name="maxPoolSize" value="${task.max_pool_size}" />
		<property name="queueCapacity" value="${task.queue_capacity}" />
		<property name="keepAliveSeconds" value="${task.keep_alive_seconds}" />
	</bean>

	<task:annotation-driven />

	<!-- jedis -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${jredis.pool.maxTotal}" />
		<property name="maxWaitMillis" value="${jredis.pool.maxWaitMillis}" />
		<property name="maxIdle" value="${jredis.pool.maxIdle}" />
		<property name="testOnBorrow" value="${jredis.pool.testOnBorrow}" />
		<property name="testWhileIdle" value="${jredis.pool.testOnReturn}" />
	</bean>
	<bean id="jedisPool" class="redis.clients.jedis.JedisPool">
		<constructor-arg index="0" ref="jedisPoolConfig" />
		<constructor-arg index="1" value="${jredis.master.ip}" />
		<constructor-arg index="2" value="${jredis.master.port}" />
		<constructor-arg index="3" value="${jredis.master.timeout}" />
		<constructor-arg index="4" value="${jredis.master.password}"/>
	</bean>
	<bean id="jedisTemplate" class="huxg.framework.dao.redis.JedisTemplate">
		<constructor-arg index="0" ref="jedisPool" />
	</bean>

	<bean id="multipartResolver"
		class="huxg.framework.filter.parameter.MyMultipartResolver">
		<property name="defaultEncoding" value="UTF-8" />
	</bean>

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="contentType" value="text/html; charset=UTF-8" />
		<property name="suffix" value="${template.suffix}" />
		<!-- <property name="exposeRequestAttributes" value="true" /> -->
		<property name="exposeSessionAttributes" value="true" />
		<property name="viewClass"
			value="huxg.framework.web.view.MyFreemarkerView" />
	</bean>

	<bean id="connectionProvider"
		class="huxg.framework.thrift.ConnectionProviderImpl">
		<property name="serviceIP" value="${thrift.pool.ip}" />
		<property name="servicePort" value="${thrift.pool.port}" />
		<property name="maxActive" value="${thrift.pool.maxActive}" />
		<property name="maxIdle" value="${thrift.pool.maxIdle}" />
		<property name="testOnBorrow" value="${thrift.pool.testOnBorrow}" />
		<property name="testOnReturn" value="${thrift.pool.testOnReturn}" />
		<property name="testWhileIdle" value="${thrift.pool.testWhileIdle}" />
		<property name="conTimeOut" value="${thrift.pool.conTimeOut}" />
	</bean>

	<bean id="connectionManager" class="huxg.framework.thrift.ConnectionManager">
		<property name="connectionProvider" ref="connectionProvider" />
	</bean>

	<!-- 配置短信发送插件 -->
	<bean id="SMSProvider" class="huxg.framework.plugin.sms.zz.ZZSMSProvider">
	</bean>
	
</beans>